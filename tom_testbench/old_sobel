`timescale 1ns / 1ps

module old_sobel#(
        parameter H = 720,
        parameter W = 1280
    )
    (
        input clk,
        input rstn,
        
        input start,
        output reg ready   

    );
    
reg [7:0]     ROM_Gray [H-1:0][W-1:0];
reg signed[15:0]    ROM_Edge [H-1-2:0][W-1-2:0];
    
    
    
reg[15:0]   W_counter = 0,
            H_counter = 0; 
            
reg signed[15:0]   Gx = 0,
                   Gy = 0;
 
integer fd,i,j;          

reg final = 0;

initial begin
    $readmemh("test.mem", ROM_Gray);
end

 
always @(posedge clk) begin
    if(!rstn) begin
        ready  <= 0;
        final <= 0;
    end
    
    
    else begin
    
        if(start & !ready) begin
            ROM_Edge[H_counter][W_counter] <= Gx + Gy;
            
            if(W_counter != W-1-2) begin
                W_counter <= W_counter + 1;              
            end
            
            else begin
                W_counter <= 0;
                H_counter <= H_counter + 1;
            end
            
            
            if(W_counter == W-1-2    &&   H_counter == H-1-2) begin
                ready <= 1;
            end
            
        end
        
        else if (ready & ~final) begin
            fd = $fopen("test_detect", "w");
            for(i=0;i<H-2;i=i+1)begin
               for(j=0;j<W-2;j=j+1)begin   
                    $fwrite(fd,"%h  " ,ROM_Edge[i][j]);
               end
               $fwrite(fd,"\n");
            end
            $fclose(fd);  
            final <= 1;
            $stop;
        end
        
        
    end
end



always @(posedge clk) begin
    Gx <=    -ROM_Gray[H_counter][W_counter] + ROM_Gray[H_counter+2][W_counter]          +
             -2*ROM_Gray[H_counter][W_counter+1] + 2*ROM_Gray[H_counter+2][W_counter+1]  +
             -ROM_Gray[H_counter][W_counter+2] + ROM_Gray[H_counter+2][W_counter+2]      ;
             
    Gy <=   -ROM_Gray[H_counter][W_counter] - 2*ROM_Gray[H_counter+1][W_counter] - ROM_Gray[H_counter+2][W_counter]       +
             ROM_Gray[H_counter][W_counter+2] + 2*ROM_Gray[H_counter+1][W_counter+2] + ROM_Gray[H_counter+2][W_counter+2]  ;
end
    
    
    
endmodule
